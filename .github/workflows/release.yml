name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary: jira-linux-x86_64
            archive: tar.gz
          - os: ubuntu-24.04-arm
            goos: linux
            goarch: arm64
            binary: jira-linux-arm64
            archive: tar.gz
          # Windows builds
          - os: windows-latest
            goos: windows
            goarch: amd64
            binary: jira-windows-x86_64
            archive: zip
          # macOS builds
          - os: macos-latest
            goos: darwin
            goarch: arm64
            binary: jira-macOS-arm64
            archive: tar.gz
          - os: macos-13
            goos: darwin
            goarch: amd64
            binary: jira-macOS-x86_64
            archive: tar.gz
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build binary
      run: |
        LDFLAGS="-s -w"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.GitCommit=${{ github.sha }}"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.SourceDateEpoch=$(git log -1 --format=%ct)"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.Version=${{ github.ref_name }}"
        go build -ldflags="$LDFLAGS" -o ${{ matrix.binary }}${{ matrix.goos == 'windows' && '.exe' || '' }} ./cmd/jira/main.go
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm }}
        CGO_ENABLED: 1
      shell: bash

    - name: Create archive (Linux/macOS)
      if: matrix.archive == 'tar.gz'
      run: tar -czf ${{ matrix.binary }}.tar.gz ${{ matrix.binary }}
      shell: bash

    - name: Create archive (Windows)
      if: matrix.archive == 'zip'
      run: Compress-Archive -Path ${{ matrix.binary }}.exe -DestinationPath ${{ matrix.binary }}.zip
      shell: pwsh

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.binary }}
        path: ${{ matrix.archive == 'tar.gz' && format('{0}.tar.gz', matrix.binary) || matrix.archive == 'zip' && format('{0}.zip', matrix.binary) || matrix.binary }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/jira-linux-x86_64/jira-linux-x86_64.tar.gz
          artifacts/jira-linux-arm64/jira-linux-arm64.tar.gz
          artifacts/jira-windows-x86_64/jira-windows-x86_64.zip
          artifacts/jira-macOS-arm64/jira-macOS-arm64.tar.gz
          artifacts/jira-macOS-x86_64/jira-macOS-x86_64.tar.gz
        body: |
          ## Release ${{ github.ref_name }}
          
          Download the appropriate binary for your platform and extract (if needed).
          
          ### Installation
          ```bash
          # Linux/macOS
          tar -xzf jira-*.tar.gz
          chmod +x jira-*
          mv jira-* /usr/local/bin/jira
          
          # Windows
          # Extract and run the .exe file
          unzip jira-windows-x86_64.zip
          .\jira-windows-x86_64.exe
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
