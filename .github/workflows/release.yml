name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build for Linux
      run: |
        LDFLAGS="-s -w"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.GitCommit=${{ github.sha }}"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.SourceDateEpoch=$(git log -1 --format=%ct)"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.Version=${{ github.ref_name }}"
        go build -ldflags="$LDFLAGS" -o jira-linux-amd64 ./cmd/jira/main.go
        tar -czf jira-linux-amd64.tar.gz jira-linux-amd64

    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: jira-linux-amd64
        path: jira-linux-amd64.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build for Windows
      run: |
        $LDFLAGS="-s -w"
        $LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.GitCommit=${{ github.sha }}"
        $LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.SourceDateEpoch=$(git log -1 --format=%ct)"
        $LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.Version=${{ github.ref_name }}"
        go build -ldflags="$LDFLAGS" -o jira-windows-amd64.exe ./cmd/jira/main.go
      env:
        GOOS: windows
        GOARCH: amd64

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: jira-windows-amd64
        path: jira-windows-amd64.exe

  build-macos:
    runs-on: macos-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Build for macOS ARM64
      run: |
        LDFLAGS="-s -w"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.GitCommit=${{ github.sha }}"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.SourceDateEpoch=$(git log -1 --format=%ct)"
        LDFLAGS="$LDFLAGS -X github.com/jorres/jira-tui/internal/version.Version=${{ github.ref_name }}"
        go build -ldflags="$LDFLAGS" -o jira-darwin-arm64 ./cmd/jira/main.go
        tar -czf jira-darwin-arm64.tar.gz jira-darwin-arm64
      env:
        GOOS: darwin
        GOARCH: arm64

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: jira-darwin-arm64
        path: jira-darwin-arm64.tar.gz

  release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/jira-linux-amd64/jira-linux-amd64.tar.gz
          artifacts/jira-windows-amd64/jira-windows-amd64.exe
          artifacts/jira-darwin-arm64/jira-darwin-arm64.tar.gz
        body: |
          ## Release ${{ github.ref_name }}
          
          This release contains binaries for:
          - Linux (x86_64) - `jira-linux-amd64.tar.gz`
          - Windows (x86_64) - `jira-windows-amd64.exe`
          - macOS (ARM64) - `jira-darwin-arm64.tar.gz`
          
          Download the appropriate binary for your platform and extract (if needed).
          
          ### Installation
          ```bash
          # Linux/macOS
          tar -xzf jira-*.tar.gz
          chmod +x jira-*
          mv jira-* /usr/local/bin/jira
          
          # Windows
          # Just run the .exe file
          ```
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
